// Микрозадачи
// Обработчики промисов .then/.catch/.finally всегда асинхронны.

// Даже когда промис сразу же выполнен, код в строках ниже
// .then/.catch/.finally будет запущен до этих обработчиков.

let promise = Promise.resolve();

promise.then(() => console.log("промис выполнен"));

console.log("код выполнен"); // этот alert показывается первым


// Очередь микрозадач
// Асинхронные задачи требуют правильного управления. 
// Для этого стандарт предусматривает внутреннюю очередь PromiseJobs, 
// более известную как «очередь микрозадач (microtask queue)» (термин V8).

// 1)Очередь определяется как первым-пришёл-первым-ушёл (FIFO): задачи, попавшие в очередь первыми, 
// выполняются тоже первыми.

// 2)Выполнение задачи происходит только в том случае, если ничего больше не запущено.


// Или, проще говоря, когда промис выполнен, его обработчики .then/catch/finally попадают в очередь. 
// Они пока не выполняются. Движок JavaScript берёт задачу из очереди и выполняет её, 
// когда он освободится от выполнения текущего кода.


// Обработчики промисов всегда проходят через эту внутреннюю очередь.

// Если есть цепочка с несколькими .then/catch/finally, то каждый из них выполняется асинхронно. 
// То есть сначала ставится в очередь, а потом выполняется, когда выполнение текущего кода завершено 
// и добавленные ранее в очередь обработчики выполнены.

